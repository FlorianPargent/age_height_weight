---
title: "Secondary analyses"
---

## Load packages

```{r}
library(foreign)
library(tidyverse)
library(semTools)
library(lavaan)
```

## Load datasets

```{r}
dat_poly <- read.spss("../data/Haupterhebung Studie III (Polytom 6PS).sav", 
  to.data.frame = TRUE, use.value.labels = FALSE, na.omit = TRUE)
dat_dich <- read.spss("../data/Haupterhebung Studie III (Dichotom 2PS).sav",
  to.data.frame = TRUE, use.value.labels = FALSE, na.omit = TRUE)
```

## Fit and analyze CFA models with correlated errors

```{r}
### tau-kongeneric models with correlated errors 
modelA <- "
  f1 =~ A_1 +  A_2 + A_3 + A_4 + A_5 + A_6 + A_7 + A_8 + A_9 +A_10 + A_11 + A_12 + Alter_realW
  A_3 ~~ A_9
  A_2 ~~ A_5
  A_7 ~~ A_10"
modelG <- "
  f1 =~ KGr_13 + KGr_14 + KGr_15 + KGr_16 + KGr_17 + KGr_18 + KGr_19 + KGr_20 + KGr_21 + KGr_22 + KGr_23 + KGr_24 + Koerpergroesse_realW
  KGr_22 ~~ KGr_23 
  KGr_16 ~~ KGr_21"
modelGe <- "
  f1 =~ KGe_25 + KGe_26 + KGe_27 + KGe_28 + KGe_29 + KGe_30 + KGe_31 + KGe_32 + KGe_33 + KGe_34 + KGe_35 + KGe_36 + Koerpergewicht_realW
  KGe_30 ~~ KGe_36
  KGe_27 ~~ KGe_31"

### run model test with MIIVsem
### fit1 <- MIIVsem::miive(model = model1, data = dat_poly)

fit1A6 <- cfa(model = modelA, data = dat_poly, ordered = c("A_1","A_2", "A_3", "A_4", "A_5", "A_6", "A_7","A_8", "A_9", "A_10", "A_11","A_12"), std.lv=TRUE, meanstructure=TRUE)
fit1A2 <- cfa(model = modelA, data = dat_dich, ordered = c("A_1","A_2", "A_3", "A_4", "A_5", "A_6", "A_7","A_8", "A_9", "A_10", "A_11","A_12"), std.lv=TRUE, meanstructure=TRUE)
fit1G6 <- cfa(model = modelG, data = dat_poly, ordered = c("KGr_13","KGr_14", "KGr_15", "KGr_16", "KGr_17", "KGr_18", "KGr_19","KGr_20", "KGr_21", "KGr_22", "KGr_23","KGr_24"), std.lv=TRUE, meanstructure=TRUE)
fit1G2 <- cfa(model = modelG, data = dat_dich, ordered = c("KGr_13","KGr_14", "KGr_15", "KGr_16", "KGr_17", "KGr_18", "KGr_19","KGr_20", "KGr_21", "KGr_22", "KGr_23","KGr_24"), std.lv=TRUE, meanstructure=TRUE)
fit1Ge6 <- cfa(model = modelGe, data = dat_poly, ordered = c("KGe_25","KGe_26", "KGe_27", "KGe_28", "KGe_29", "KGe_30", "KGe_31","KGe_32", "KGe_33", "KGe_34", "KGe_35","KGe_36"), std.lv=TRUE, meanstructure=TRUE)
fit1Ge2 <- cfa(model = modelGe, data = dat_dich, ordered = c("KGe_25","KGe_26", "KGe_27", "KGe_28", "KGe_29", "KGe_30", "KGe_31","KGe_32", "KGe_33", "KGe_34", "KGe_35","KGe_36"), std.lv=TRUE, meanstructure=TRUE)

summary(fit1A6, fit.measures=TRUE, standardized = TRUE, rsquare = TRUE, modindices = TRUE)
summary(fit1A2, fit.measures=TRUE, standardized = TRUE, rsquare = TRUE, modindices = TRUE)
summary(fit1G6, fit.measures=TRUE, standardized = TRUE, rsquare = TRUE, modindices = TRUE)
summary(fit1G2, fit.measures=TRUE, standardized = TRUE, rsquare = TRUE, modindices = TRUE)
summary(fit1Ge6, fit.measures=TRUE, standardized = TRUE, rsquare = TRUE, modindices = TRUE)
summary(fit1Ge2, fit.measures=TRUE, standardized = TRUE, rsquare = TRUE, modindices = TRUE)

tabelle1a <- compareFit(fit1A6, fit1G6, fit1Ge6, nested=FALSE)
tabelle1b <- compareFit(fit1A2, fit1G2, fit1Ge2, nested=FALSE)
summary(tabelle1a)
summary(tabelle1b)
```

```{r}
load_df <- 
  bind_rows(
    standardizedSolution(fit1A6, type = "std.all") |> mutate(measure = "age", categories = "6"),
    standardizedSolution(fit1A2, type = "std.all") |> mutate(measure = "age", categories = "2"),
    standardizedSolution(fit1G6, type = "std.all") |> mutate(measure = "height", categories = "6"),
    standardizedSolution(fit1G2, type = "std.all") |> mutate(measure = "height", categories = "2"),
    standardizedSolution(fit1Ge6, type = "std.all") |> mutate(measure = "weight", categories = "6"),
    standardizedSolution(fit1Ge2, type = "std.all") |> mutate(measure = "weight", categories = "2")) |>
  filter(lhs == "f1" & op == "=~") |> 
  mutate(item_name = rhs) |>
  # Create new columns: prefix (everything before underscore) and suffix (the numeric part)
  mutate(prefix = sub("_.*", "", item_name),
    suffix = as.numeric(sub(".*_", "", item_name))) |>
  group_by(prefix) |>
  mutate(item = match(suffix, sort(unique(suffix)))) |>
  mutate(item = replace_na(as.character(item), "Physical item")) |>
  ungroup() |>
  mutate(est_print = papaja::printnum(est.std, gt1 = FALSE, digits = 3)) |>
  select(item, measure, categories, est_print) |>
  pivot_wider(names_from = c(measure, categories), values_from = est_print)

fit_df <- bind_rows(
  data.frame(as.list(fitMeasures(fit1A6))) |> mutate(measure = "age", categories = "6"),
  data.frame(as.list(fitMeasures(fit1A2))) |> mutate(measure = "age", categories = "2"),
  data.frame(as.list(fitMeasures(fit1G6))) |> mutate(measure = "height", categories = "6"),
  data.frame(as.list(fitMeasures(fit1G2))) |> mutate(measure = "height", categories = "2"),
  data.frame(as.list(fitMeasures(fit1Ge6))) |> mutate(measure = "weight", categories = "6"),
  data.frame(as.list(fitMeasures(fit1Ge2))) |> mutate(measure = "weight", categories = "2")
) |>
  pivot_longer(!c(measure, categories), names_to = "statistic", values_to = "est") |>
  filter(statistic %in% c("chisq.scaled", "pvalue.scaled", "df.scaled", "cfi.scaled", "rmsea.scaled", "srmr")) |>
  mutate(est_print = papaja::printnum(est, gt1 = FALSE, digits = 3)) |>
  pivot_wider(id_cols = statistic, names_from = c(measure, categories), values_from = est_print)

table5 <- rbind(
    load_df |> rename(Measure = item) |> mutate(group = "Items"),
    fit_df |> rename(Measure = statistic) |> mutate(group = "Fit")
  ) |> 
  group_by(group) |>
  flextable::as_grouped_data(groups = "group") |>
  flextable::as_flextable(hide_grouplabel = TRUE) |>
  flextable::add_header_row(values = c("Measure", "Age", "Height", "Weight"),
    colwidths = c(1, 2, 2, 2)) |>
  flextable::set_header_labels(
    values = list(
      Measure = "Categories",
      age_6 = "6", age_2 = "2", 
      height_6 = "6", height_2 = "2",
      weight_6 = "6", weight_2 = "2")) |>
  flextable::align(i = 1, align = "center", part = "header") |>
  flextable::border(i = 2, j = 1, border.top = officer::fp_border(width = 0), part = "header") |>
  flextable::border(i = 1, j = 1, border.bottom = officer::fp_border(width = 0), part = "header") |>
  flextable::theme_apa() |>
  ftExtra::colformat_md()
table5
```

## Modification indices

```{r}
mod_indA6 <- lavaan::modificationindices(fit1A6)
subset(mod_indA6[order(mod_indA6$mi, decreasing=TRUE), ], mi > 4)
mod_indA2 <- lavaan::modificationindices(fit1A2)
subset(mod_indA2[order(mod_indA2$mi, decreasing=TRUE), ], mi > 4)
mod_indG6 <- lavaan::modificationindices(fit1G6)
subset(mod_indG6[order(mod_indG6$mi, decreasing=TRUE), ], mi > 4)
mod_indG2 <- lavaan::modificationindices(fit1G2)
subset(mod_indG2[order(mod_indG2$mi, decreasing=TRUE), ], mi > 4)
mod_indGe6 <- lavaan::modificationindices(fit1Ge6)
subset(mod_indGe6[order(mod_indGe6$mi, decreasing=TRUE), ], mi > 4)
mod_indGe2 <- lavaan::modificationindices(fit1Ge2)
subset(mod_indGe2[order(mod_indGe2$mi, decreasing=TRUE), ], mi > 4)
```

# Save Results for Manuscript

```{r}
results <- saveRDS(
  object = list(
    table5 = table5
    ), 
  file = "../results/results_secondary.rds"
)
```